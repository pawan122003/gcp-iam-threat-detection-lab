name: Security Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      
      - name: Terraform Format Check
        run: |
          cd infra/terraform
          terraform fmt -check -recursive
        continue-on-error: true
      
      - name: Terraform Validate
        run: |
          cd infra/terraform
          terraform init -backend=false
          terraform validate
        continue-on-error: true
      
      - name: Run Semgrep
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: detection/rules/semgrep.yaml
        continue-on-error: true
      
      - name: Run Gitleaks
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      
      - name: Setup OPA
        uses: open-policy-agent/setup-opa@v2
        with:
          version: latest
      
      - name: Run OPA Policy Tests
        run: |
          opa test policies/opa/
        continue-on-error: true
      
      - name: Comment PR with Security Findings
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const semgrepStatus = '${{ steps.semgrep.outcome }}';
            const gitleaksStatus = '${{ steps.gitleaks.outcome }}';
            
            let comment = '## 🔒 Security Scan Summary\n\n';
            
            comment += '### Semgrep\n';
            if (semgrepStatus === 'success') {
              comment += '✅ No issues found\n\n';
            } else {
              comment += '⚠️ Issues detected - check workflow logs for details\n\n';
            }
            
            comment += '### Gitleaks\n';
            if (gitleaksStatus === 'success') {
              comment += '✅ No secrets detected\n\n';
            } else {
              comment += '⚠️ Potential secrets detected - check workflow logs for details\n\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  opa-policy-gate:
    runs-on: ubuntu-latest
    name: OPA Policy Gate
    needs: security-scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup OPA
        uses: open-policy-agent/setup-opa@v2
        with:
          version: latest
      
      - name: Run OPA Policy Evaluation
        id: opa-eval
        run: |
          cd policies/opa
          
          # Run OPA eval and capture output
          echo "Running OPA evaluation..."
          opa eval -d . -i ../../infra/terraform/main.tf 'data.terraform.deny' --format pretty > opa_output.txt || true
          
          # Check if there are any deny rules
          if grep -q "\[" opa_output.txt && ! grep -q "\[\]" opa_output.txt; then
            echo "deny_found=true" >> $GITHUB_OUTPUT
            cat opa_output.txt
            exit 1
          else
            echo "deny_found=false" >> $GITHUB_OUTPUT
            echo "No policy violations found"
          fi
        continue-on-error: false
